plot(x,y)
# Lets simmulate data and try to fit
x = 1:100/10
a = c(1/2, 1/4, 1/4)
K = c(1,3, 6)
C= 0
lambda=2
y = posterior_predictive(x,C,a, lambda, K)
plot(x,y)
# Lets simmulate data and try to fit
x = 1:100/10
a = c(1/2, 1/4, 1/4)
K = c(1,3, 6)
C= 0
lambda=0.1
y = posterior_predictive(x,C,a, lambda, K)
plot(x,y)
lambda=1
y = posterior_predictive(x,C,a, lambda, K)
plot(x,y)
lambda=0.1
y = posterior_predictive(x,C,a, lambda, K)
plot(x,y)
libray(rstan)
y = posterior_predictive(x,C,a, lambda, K) + rnorm(100,0,0.1)
plot(x,y)
y = posterior_predictive(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
y = posterior_predictive(x,C,a, lambda, K) + rnorm(100,0,0.05)
plot(x,y)
y = posterior_predictive(x,C,a, lambda, K) + rnorm(100,0,0.02)
plot(x,y)
y = posterior_predictive(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
library(rstan)
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
m = ncol(y),
alpha=1
)
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS/extras')
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit <- stan('AMSpline_stickprior.stan', data = list_am, iter = 1e4)
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit <- stan('StanExample.stan', data = list_am, iter = 1e4)
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit <- stan('StanExample.stan', data = list_am, iter = 1e4)
posterior <- extract(fit)
x
min(x)
max(x)
lenght(x)
length(x)
make_plots_example = function(x,y,posterior,K,lambda, logplotx=T){
file_plot = paste('images/npb_stanchains_example',length(K), lambda, '.png', sep = '_')
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
C_est = mean(C_post)
sigma2_est = mean(sigma2_post)
x_est = seq(min(x),max(x), length.out = 200)
y_est = posterior_predictive(x_est, C_est, a_est)
file_plot = paste('images/npb_stanfit_example',length(K),lambda, '.png', sep = '_')
png(file=file_plot,res=400, width=20, height=16, units='cm')
par(mfrow=c(1,1))
main_plot = paste('NPB fit K=',length(K),' Lambda=',lambda, sep='')
if(logplotx==T){plot(x,y, ylim = c(0.4,1.1), main=main_plot, log='x')
}else{
plot(x,y, ylim = c(0.4,1.1), main=main_plot)
}
lines(x_est,y_est, type='l', col='red')
dev.off()
}
posterior <- extract(fit)
make_plots_example(x,y,posterior,K,lambda, logplotx=F)
K
make_plots_example = function(x,y,posterior,K,lambda, logplotx=T){
file_plot = paste('images/npb_stanchains_example',length(K), lambda, '.png', sep = '_')
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
C_est = mean(C_post)
sigma2_est = mean(sigma2_post)
x_est = seq(min(x),max(x), length.out = 200)
y_est = am_spline(x_est, C_est, a_est, lambda, K)
file_plot = paste('images/npb_stanfit_example',length(K),lambda, '.png', sep = '_')
png(file=file_plot,res=400, width=20, height=16, units='cm')
par(mfrow=c(1,1))
main_plot = paste('NPB fit K=',length(K),' Lambda=',lambda, sep='')
if(logplotx==T){plot(x,y, ylim = c(0.4,1.1), main=main_plot, log='x')
}else{
plot(x,y, ylim = c(0.4,1.1), main=main_plot)
}
lines(x_est,y_est, type='l', col='red')
dev.off()
}
# Lets simmulate data and try to fit
x = 1:100/10
a = c(1/2, 1/4, 1/4)
K = c(1,3, 6)
C= 0
lambda=0.1
y = posterior_predictive(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
library(rstan)
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
alpha=1
)
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS/extras')
posterior <- extract(fit)
make_plots_example(x,y,posterior,K,lambda, logplotx=F)
am_spline = function(x, C, a, lambda, K){
y_est = c()
if(length(x)==1){
y_est = C  + (1-C)*sum(a*(1-pnorm(x[i], K, sqrt(lambda)) ) )
}else{
for(i in  1:length(x))
y_est[i] = C  + (1-C)*sum(a*(1-pnorm(x[i], K, sqrt(lambda)) ) )
}
return(y_est)
}
y = am_spline(x,C,a, lambda, K) + rnorm(100,0,0.01)
make_plots_example(x,y,posterior,K,lambda, logplotx=F)
C
C_est
C_post
mean(posterior$C)
make_plots_example = function(x,y,posterior,K,lambda, logplotx=T){
file_plot = paste('images/npb_stanchains_example',length(K), lambda, '.png', sep = '_')
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
C_est = mean(C_post)
sigma2_est = mean(sigma2_post)
x_est = seq(min(x),max(x), length.out = 200)
y_est = am_spline(x_est, C_est, a_est, lambda, K)
file_plot = paste('images/npb_stanfit_example',length(K),lambda, '.png', sep = '_')
png(file=file_plot,res=400, width=20, height=16, units='cm')
par(mfrow=c(1,1))
main_plot = paste('NPB fit K=',length(K),' Lambda=',lambda, sep='')
if(logplotx==T){plot(x,y, ylim = c(C_est-0.1,1.1), main=main_plot, log='x')
}else{
plot(x,y, ylim = c(C_est-0.1,1.1), main=main_plot)
}
lines(x_est,y_est, type='l', col='red')
dev.off()
}
# Lets simmulate data and try to fit
x = 1:100/10
a = c(1/2, 1/4, 1/4)
K = c(1,3, 6)
C= 0
lambda=0.1
y = am_spline(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
library(rstan)
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
alpha=1
)
posterior <- extract(fit)
make_plots_example(x,y,posterior,K,lambda, logplotx=F)
# Lets simmulate data and try to fit
x = 1:100/10
a = c(1/2, 1/4, 1/4)
K = c(1,3, 6)
C= 0.5
lambda=0.1
y = am_spline(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
library(rstan)
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
alpha=1
)
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS/extras')
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit <- stan('StanExample.stan', data = list_am, iter = 1e4)
posterior <- extract(fit)
posterior <- extract(fit)
make_plots_example(x,y,posterior,K,lambda, logplotx=F)
set.seed(41)
am_spline = function(x, C, a, lambda, K){
y_est = c()
if(length(x)==1){
y_est = C  + (1-C)*sum(a*(1-pnorm(x[i], K, sqrt(lambda)) ) )
}else{
for(i in  1:length(x))
y_est[i] = C  + (1-C)*sum(a*(1-pnorm(x[i], K, sqrt(lambda)) ) )
}
return(y_est)
}
make_plots_example = function(x,y,posterior,K,lambda, logplotx=T, title='example'){
file_plot = paste('images/npb_',title,length(K), lambda, '.png', sep = '_')
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
C_est = mean(C_post)
sigma2_est = mean(sigma2_post)
x_est = seq(min(x),max(x), length.out = 200)
y_est = am_spline(x_est, C_est, a_est, lambda, K)
file_plot = paste('images/npb_',title,length(K),lambda, '.png', sep = '_')
png(file=file_plot,res=400, width=20, height=16, units='cm')
par(mfrow=c(1,1))
main_plot = paste('NPB fit K=',length(K),' Lambda=',lambda, sep='')
if(logplotx==T){plot(x,y, ylim = c(C_est-0.1,1.1), main=main_plot, log='x')
}else{
plot(x,y, ylim = c(C_est-0.1,1.1), main=main_plot)
}
lines(x_est,y_est, type='l', col='red')
dev.off()
}
# Lets simmulate data and try to fit
x = 1:100/10
a = c(1/2, 1/4, 1/4)
K = c(1,3, 6)
C= 0.5
lambda=0.1
set.seed(41)
y = am_spline(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
library(rstan)
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
alpha=1
)
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS/extras')
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit1 <- stan('StanExample.stan', data = list_am, iter = 1e4)
posterior1 <- extract(fi1)
make_plots_example(x,y,posterior1,K,lambda, logplotx=F, title='stick')
posterior1 <- extract(fit1)
make_plots_example(x,y,posterior1,K,lambda, logplotx=F, title='stick')
fit2 <- stan('StanExampleDirUniPrior.stan', data = list_am, iter = 1e4)
posterior2 <- extract(fit2)
make_plots_example(x,y,posterior2,K,lambda, logplotx=F,'dir')
make_plots_example(x,y,posterior1,K,lambda, logplotx=F, title='stick')
file_plot = paste('images/npb',title,length(K), lambda, '.png', sep = '_')
title
title='example'
file_plot = paste('images/npb',title,length(K), lambda, '.png', sep = '_')
file_plot
posterior = posterior1
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
file_plot
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
file_plot = paste('images/npb',title,length(K), lambda, '.png', sep = '_')
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
a_est
C_est = mean(C_post)
C_est
sigma2_est = mean(sigma2_post)
sigma2_est
title posterior = posterior2
posterior = posterior2
title = 'dir'
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
file_plot = paste('images/npb',title,length(K), lambda, '.png', sep = '_')
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
a_post
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
C_est = mean(C_post)
sigma2_est = mean(sigma2_post)
a_est
C_est
### AM-Splines
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS')
source('PreliminaryFunctions.R')
source('NPDS.R')
source('IsotonicRegressionFit.R')
source('SigmoidFit.R')
lseq <- function(from=1, to=100000, length.out=6) {
# logarithmic spaced sequence
# blatantly stolen from library("emdbook"), because need only this
exp(seq(log(from), log(to), length.out = length.out))
}
posterior_predictive = function(x, C, a){
y_est = c()
if(length(x)==1){
y_est = C  + (1-C)*sum(a*(1-pnorm(x[i], K, sqrt(lambda)) ) )
}else{
for(i in  1:length(x))
y_est[i] = C  + (1-C)*sum(a*(1-pnorm(x[i], K, sqrt(lambda)) ) )
}
return(y_est)
}
make_plots = function(posterior,K,lambda, logplotx=T){
file_plot = paste('images/npb_stanchains',length(K), lambda, '.png', sep = '_')
C_post = posterior$C
sigma2_post = posterior$sigma2
a_post = posterior$a
n_knots = ncol(a_post)
n = length(C_post)
obs = seq(1,n, by = 100)
library(randomcoloR)
png(file=file_plot, res=200, width=10, height=15,units = "cm" )
par(mfrow = c(3,1))
plot(C_post[obs], type='l',col='red',main = 'C (right limit)')
plot(sigma2_post[obs], type='l',col='blue',main='Sigma (std)')
plot( a_post[obs,1], type='l',col='blue',main='a (weights)', ylim=c(0,0.5) )
for( i in 2:(n_knots-1))
lines(a_post[obs,i], type='l',col=randomColor(count=1))
dev.off()
# Final mean estimates, same  procedure as done in paper to construct point process
a_est = colMeans(a_post)
C_est = mean(C_post)
sigma2_est = mean(sigma2_post)
x_est = seq(min(x),max(x), length.out = 100)
y_est = posterior_predictive(x_est, C_est, a_est)
file_plot = paste('images/npb_stanfit',length(K),lambda, '.png', sep = '_')
png(file=file_plot,res=400, width=20, height=16, units='cm')
par(mfrow=c(1,1))
main_plot = paste('NPB fit K=',length(K),' Lambda=',lambda, sep='')
if(logplotx==T){plot(x,y[,1], ylim = c(0.4,1.1), main=main_plot, log='x')
}else{
plot(x,y[,1], ylim = c(0.4,1.1), main=main_plot)
}
points(x,y[,2])
points(x,y[,3])
points(x,y[,4])
lines(x_est,y_est, type='l', col='red')
lines(x, rowMeans(y), col='blue')
dev.off()
}
input = list(mean_switch=T, outlier_switch=T, onehunda_switch=T, dosedep_auc=T,
checkgroup1 = c("Point samples" ,
"Spline fit" ,
"Min-max bands",
"Empirical viability bands",
"Drug span gradient",
# "Absolute doses" ,
"Relative doses")
)
df = openxlsx::read.xlsx('data/Drug_response_S8.xlsx', sheet = 1)
df_list  = read_excel_allsheets('data/Drug_response_S8.xlsx')
block = extract_dose_block(df_list, '5FU', 'P1', 'T1', 1)
block2 = preprocess_data(block, mean_samples = input$mean_switch, keep_outliers = input$outlier_switch, over_viability = input$onehunda_switch)
options(mc.cores = parallel::detectCores())
library(rstan)
options(mc.cores = parallel::detectCores())
library(rstan)
K = block2$doses
x = block2$doses
lambda = 0.1
y_max = max(as.matrix(block2[,2:5]))
y = block2[2:6]/y_max
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
m = ncol(y),
alpha=1
)
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS/extras')
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit <- stan('AMSpline_stickprior.stan', data = list_am, iter = 1e4)
posterior <- extract(fit)
make_plots(posterior,K,lambda, logplotx=F)
a = rev(c(1/2, 1/4, 1/4))
# Lets simmulate data and try to fit
x = 1:100/10
a = rev(c(1/2, 1/4, 1/4))
K = c(1,3, 6)
C= 0.5
lambda=0.1
set.seed(41)
y = am_spline(x,C,a, lambda, K) + rnorm(100,0,0.01)
plot(x,y)
options(mc.cores = parallel::detectCores())
library(rstan)
list_am <- list(
K = K,
lambda = lambda,
n_knots = length(K),
x=x,
y=y,
n = length(x),
alpha=1
)
setwd('/Users/bwilliams/GoogleDrive/UniversityOfHelsinki/Summer2021/Network Pharmacology Group/ENDS/ENDS/extras')
# fit <- stan('AMSpline.stan', data = list_am, iter = 1e4)
fit1 <- stan('StanExample.stan', data = list_am, iter = 1e4)
posterior1 <- extract(fit1)
make_plots_example(x,y,posterior1,K,lambda, logplotx=F, title='stick')
